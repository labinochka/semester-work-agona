/*
 * This file is generated by jOOQ.
 */
package com.technokratos.model.jooq.schema.tables.records;


import com.technokratos.model.jooq.schema.tables.Post;
import com.technokratos.model.jooq.schema.tables.pojos.PostEntity;

import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PostRecord extends UpdatableRecordImpl<PostRecord> implements Record4<UUID, UUID, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.post.uuid</code>.
     */
    public void setUuid(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.post.uuid</code>.
     */
    public UUID getUuid() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.post.author_uuid</code>.
     */
    public void setAuthorUuid(UUID value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.post.author_uuid</code>.
     */
    public UUID getAuthorUuid() {
        return (UUID) get(1);
    }

    /**
     * Setter for <code>public.post.title</code>.
     */
    public void setTitle(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.post.title</code>.
     */
    public String getTitle() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.post.content</code>.
     */
    public void setContent(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.post.content</code>.
     */
    public String getContent() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, UUID, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<UUID, UUID, String, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return Post.POST_ENTITY.UUID;
    }

    @Override
    public Field<UUID> field2() {
        return Post.POST_ENTITY.AUTHOR_UUID;
    }

    @Override
    public Field<String> field3() {
        return Post.POST_ENTITY.TITLE;
    }

    @Override
    public Field<String> field4() {
        return Post.POST_ENTITY.CONTENT;
    }

    @Override
    public UUID component1() {
        return getUuid();
    }

    @Override
    public UUID component2() {
        return getAuthorUuid();
    }

    @Override
    public String component3() {
        return getTitle();
    }

    @Override
    public String component4() {
        return getContent();
    }

    @Override
    public UUID value1() {
        return getUuid();
    }

    @Override
    public UUID value2() {
        return getAuthorUuid();
    }

    @Override
    public String value3() {
        return getTitle();
    }

    @Override
    public String value4() {
        return getContent();
    }

    @Override
    public PostRecord value1(UUID value) {
        setUuid(value);
        return this;
    }

    @Override
    public PostRecord value2(UUID value) {
        setAuthorUuid(value);
        return this;
    }

    @Override
    public PostRecord value3(String value) {
        setTitle(value);
        return this;
    }

    @Override
    public PostRecord value4(String value) {
        setContent(value);
        return this;
    }

    @Override
    public PostRecord values(UUID value1, UUID value2, String value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PostRecord
     */
    public PostRecord() {
        super(Post.POST_ENTITY);
    }

    /**
     * Create a detached, initialised PostRecord
     */
    public PostRecord(UUID uuid, UUID authorUuid, String title, String content) {
        super(Post.POST_ENTITY);

        setUuid(uuid);
        setAuthorUuid(authorUuid);
        setTitle(title);
        setContent(content);
    }

    /**
     * Create a detached, initialised PostRecord
     */
    public PostRecord(PostEntity value) {
        super(Post.POST_ENTITY);

        if (value != null) {
            setUuid(value.getUuid());
            setAuthorUuid(value.getAuthorUuid());
            setTitle(value.getTitle());
            setContent(value.getContent());
        }
    }
}
