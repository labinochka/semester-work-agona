/*
 * This file is generated by jOOQ.
 */
package com.technokratos.model.jooq.schema.tables.records;


import com.technokratos.model.jooq.schema.tables.Image;
import com.technokratos.model.jooq.schema.tables.pojos.ImageEntity;

import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ImageRecord extends UpdatableRecordImpl<ImageRecord> implements Record3<UUID, UUID, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.image.uuid</code>.
     */
    public void setUuid(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.image.uuid</code>.
     */
    public UUID getUuid() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.image.post_uuid</code>.
     */
    public void setPostUuid(UUID value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.image.post_uuid</code>.
     */
    public UUID getPostUuid() {
        return (UUID) get(1);
    }

    /**
     * Setter for <code>public.image.image_url</code>.
     */
    public void setImageUrl(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.image.image_url</code>.
     */
    public String getImageUrl() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<UUID, UUID, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<UUID, UUID, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return Image.IMAGE_ENTITY.UUID;
    }

    @Override
    public Field<UUID> field2() {
        return Image.IMAGE_ENTITY.POST_UUID;
    }

    @Override
    public Field<String> field3() {
        return Image.IMAGE_ENTITY.IMAGE_URL;
    }

    @Override
    public UUID component1() {
        return getUuid();
    }

    @Override
    public UUID component2() {
        return getPostUuid();
    }

    @Override
    public String component3() {
        return getImageUrl();
    }

    @Override
    public UUID value1() {
        return getUuid();
    }

    @Override
    public UUID value2() {
        return getPostUuid();
    }

    @Override
    public String value3() {
        return getImageUrl();
    }

    @Override
    public ImageRecord value1(UUID value) {
        setUuid(value);
        return this;
    }

    @Override
    public ImageRecord value2(UUID value) {
        setPostUuid(value);
        return this;
    }

    @Override
    public ImageRecord value3(String value) {
        setImageUrl(value);
        return this;
    }

    @Override
    public ImageRecord values(UUID value1, UUID value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ImageRecord
     */
    public ImageRecord() {
        super(Image.IMAGE_ENTITY);
    }

    /**
     * Create a detached, initialised ImageRecord
     */
    public ImageRecord(UUID uuid, UUID postUuid, String imageUrl) {
        super(Image.IMAGE_ENTITY);

        setUuid(uuid);
        setPostUuid(postUuid);
        setImageUrl(imageUrl);
    }

    /**
     * Create a detached, initialised ImageRecord
     */
    public ImageRecord(ImageEntity value) {
        super(Image.IMAGE_ENTITY);

        if (value != null) {
            setUuid(value.getUuid());
            setPostUuid(value.getPostUuid());
            setImageUrl(value.getImageUrl());
        }
    }
}
